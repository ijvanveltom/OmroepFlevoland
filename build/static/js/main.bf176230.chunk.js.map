{"version":3,"sources":["Modal.js","TaskItem.js","firebase.js","EditTask.js","Task.js","AddTask.js","TaskManager.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","open","modalLable","children","custom_modal","onClose","className","onClick","e","target","TaskItem","title","text","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","EditTask","toEditTitle","toEditText","id","useState","setTitle","setText","handleUpdate","a","preventDefault","taskDocRef","doc","updateDoc","alert","onSubmit","type","name","onChange","value","toUpperCase","Task","completed","checked","setChecked","edit","view","setOpen","handleClose","handleChange","handleDelete","deleteDoc","htmlFor","AddTask","handleSubmit","addDoc","collection","created","Timestamp","now","placeholder","TaskManager","openAddModal","setOpenAddModal","tasks","setTasks","useEffect","taskColRef","query","orderBy","onSnapshot","snapshot","docs","map","data","task","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf176230.chunk.js","sourcesContent":["import './modal.css'\n\nfunction Modal({open, modalLable, children, custom_modal, onClose}) {\n\n  const handleClose = (e) => {\n    if(e.target.className === 'modalContainer'){\n      onClose()\n    }\n    return null\n  }\n\n  if(open) {\n    return (\n      <div className='modalContainer' onClick={handleClose}>\n        <div className= {`modal ${custom_modal}`}>\n          <div className='modal__head'>\n            <h2>{modalLable}</h2>\n            <span className='modal__close' onClick={onClose}>x</span>\n          </div>\n          {children}\n        </div>\n      </div>\n    )\n  }\n  return null\n}\n\nexport default Modal\n","import Modal from \"./Modal\"\nimport './taskItem.css'\n\nfunction TaskItem({onClose, open, title, text}) {\n\n  return (\n    <Modal modalLable='Task Item' onClose={onClose} open={open}>\n      <div className='taskItem'>\n        <h2>{title}</h2>\n        <p>{text}</p>\n      </div>\n    </Modal>\n  )\n}\n\nexport default TaskItem\n","import { initializeApp } from \"firebase/app\"\nimport { getFirestore } from 'firebase/firestore'\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBmbSkqd4JLcXvL0AuNS75IeAVtCwsNH0U\",\n  authDomain: \"task-manager-68c54.firebaseapp.com\",\n  projectId: \"task-manager-68c54\",\n  storageBucket: \"task-manager-68c54.appspot.com\",\n  messagingSenderId: \"979144228712\",\n  appId: \"1:979144228712:web:5748b4ef3eb9567e8fe0dd\",\n  //measurementId: \"G-KK0D6C9B2E\"\n};\n\n// Initialize Firebase and Firestore\nconst app = initializeApp(firebaseConfig)\nconst db = getFirestore(app)\n\nexport {db}","import Modal from \"./Modal\"\nimport {useState} from 'react'\nimport './editTask.css'\nimport { doc, updateDoc } from \"firebase/firestore\";\nimport {db} from './firebase'\n\nfunction EditTask({open, onClose, toEditTitle, toEditText, id}) {\n\n  const [title, setTitle] = useState(toEditTitle)\n  const [text, setText] = useState(toEditText)\n\n  /* function to update firestore */\n  const handleUpdate = async (e) => {\n    e.preventDefault()\n    const taskDocRef = doc(db, 'tasks', id)\n    try{\n      await updateDoc(taskDocRef, {\n        title: title,\n        text: text\n      })\n      onClose()\n    } catch (err) {\n      alert(err)\n    }\n    \n  }\n\n  return (\n    <Modal modalLable='Edit Task' onClose={onClose} open={open}>\n      <form onSubmit={handleUpdate} className='editTask'>\n        <input type='text' name='title' onChange={(e) => setTitle(e.target.value.toUpperCase())} value={title}/>\n        <textarea onChange={(e) => setText(e.target.value)} value={text}></textarea>\n        <button type='submit'>Edit</button>\n      </form> \n    </Modal>\n  )\n}\n\nexport default EditTask\n","import './task.css'\nimport {useState} from 'react'\nimport TaskItem from './TaskItem'\nimport EditTask from './EditTask'\nimport { doc, updateDoc, deleteDoc} from \"firebase/firestore\";\nimport {db} from './firebase'\n\nfunction Task({id, title, text, completed}) {\n\n  const [checked, setChecked] = useState(completed)\n  const [open, setOpen] = useState({edit:false, view:false})\n\n  const handleClose = () => {\n    setOpen({edit:false, view:false})\n  }\n\n  /* function to update firestore */\n  const handleChange = async () => {\n    const taskDocRef = doc(db, 'tasks', id)\n    try{\n      await updateDoc(taskDocRef, {\n        completed: checked\n      })\n    } catch (err) {\n      alert(err)\n    }\n  }\n\n  /* function to delete a document from firstore */ \n  const handleDelete = async () => {\n    const taskDocRef = doc(db, 'tasks', id)\n    try{\n      await deleteDoc(taskDocRef)\n    } catch (err) {\n      alert(err)\n    }\n  }\n\n  return (\n    <div className={`task ${checked && 'task--borderColor'}`}>\n      <div>\n        <input \n          id={`checkbox-${id}`} \n          className='checkbox-custom'\n          name=\"checkbox\" \n          checked={checked}\n          onChange={handleChange}\n          type=\"checkbox\" />\n        <label \n          htmlFor={`checkbox-${id}`} \n          className=\"checkbox-custom-label\" \n          onClick={() => setChecked(!checked)} ></label>\n      </div>\n      <div className='task__body'>\n        <h2>{title}</h2>\n        <p>{text}</p>\n        <div className='task__buttons'>\n          <div className='task__deleteNedit'>\n            <button \n              className='task__editButton' \n              onClick={() => setOpen({...open, edit : true})}>\n              Edit\n            </button>\n            <button className='task__deleteButton' onClick={handleDelete}>Delete</button>\n          </div>\n          <button \n            onClick={() => setOpen({...open, view: true})}>\n            View\n          </button>\n        </div>\n      </div>\n\n      {open.view &&\n        <TaskItem \n          onClose={handleClose} \n          title={title} \n          text={text} \n          open={open.view} />\n      }\n\n      {open.edit &&\n        <EditTask \n          onClose={handleClose} \n          toEditTitle={title} \n          toEditText={text} \n          open={open.edit}\n          id={id} />\n      }\n\n    </div>\n  )\n}\n\nexport default Task","import Modal from \"./Modal\"\nimport {useState} from 'react'\nimport './addTask.css'\nimport {db} from './firebase'\nimport {collection, addDoc, Timestamp} from 'firebase/firestore'\n\nfunction AddTask({onClose, open}) {\n\n  const [title, setTitle] = useState('')\n  const [text, setText] = useState('')\n\n  /* function to add new task to firestore */\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await addDoc(collection(db, 'tasks'), {\n        title: title,\n        text: text,\n        completed: false,\n        created: Timestamp.now()\n      })\n      onClose()\n    } catch (err) {\n      alert(err)\n    }\n  }\n\n  return (\n    <Modal modalLable='Add Task' onClose={onClose} open={open}>\n      <form onSubmit={handleSubmit} className='addTask' name='addTask'>\n        <input \n          type='text' \n          name='title' \n          onChange={(e) => setTitle(e.target.value.toUpperCase())} \n          value={title}\n          placeholder='Enter title'/>\n        <textarea \n          onChange={(e) => setText(e.target.value)}\n          placeholder='Enter story text'\n          value={text}></textarea>\n        <button type='submit'>Done</button>\n      </form> \n    </Modal>\n  )\n}\n\nexport default AddTask\n","import './taskManager.css'\nimport Task from './Task'\nimport {useState, useEffect} from 'react'\nimport {collection, query, orderBy, onSnapshot} from \"firebase/firestore\"\nimport {db} from './firebase'\nimport AddTask from './AddTask'\n\nfunction TaskManager() {\n\n  const [openAddModal, setOpenAddModal] = useState(false)\n  const [tasks, setTasks] = useState([])\n\n  /* function to get all tasks from firestore in realtime */ \n  useEffect(() => {\n    const taskColRef = query(collection(db, 'tasks'), orderBy('created', 'desc'))\n    onSnapshot(taskColRef, (snapshot) => {\n      setTasks(snapshot.docs.map(doc => ({\n        id: doc.id,\n        data: doc.data()\n      })))\n    })\n  },[])\n\n  return (\n    <div className='taskManager'>\n      <header>Omroep Flevoland</header>\n      <div className='taskManager__container'>\n        <button \n          onClick={() => setOpenAddModal(true)}>\n          Add story +\n        </button>\n        <div className='taskManager__tasks'>\n\n          {tasks.map((task) => (\n            <Task\n              id={task.id}\n              key={task.id}\n              completed={task.data.completed}\n              title={task.data.title} \n              text={task.data.text}\n            />\n          ))}\n\n        </div>\n      </div>\n\n      {openAddModal &&\n        <AddTask onClose={() => setOpenAddModal(false)} open={openAddModal}/>\n      }\n\n    </div>\n  )\n}\n\nexport default TaskManager\n","import './App.css';\nimport Home from './TaskManager'\n\nfunction App() {\n\n  return (\n    <div className='app'>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}